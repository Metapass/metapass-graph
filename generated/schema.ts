// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class HostCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("_hostAddress", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("image", Value.fromString(""));
    this.set("bio", Value.fromString(""));
    this.set("socialLinks", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HostCreatedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HostCreatedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HostCreatedEntity", id.toString(), this);
    }
  }

  static load(id: string): HostCreatedEntity | null {
    return changetype<HostCreatedEntity | null>(
      store.get("HostCreatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get _hostAddress(): string {
    let value = this.get("_hostAddress");
    return value!.toString();
  }

  set _hostAddress(value: string) {
    this.set("_hostAddress", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get bio(): string {
    let value = this.get("bio");
    return value!.toString();
  }

  set bio(value: string) {
    this.set("bio", Value.fromString(value));
  }

  get socialLinks(): string {
    let value = this.get("socialLinks");
    return value!.toString();
  }

  set socialLinks(value: string) {
    this.set("socialLinks", Value.fromString(value));
  }
}

export class TicketBoughtEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("ticketID", Value.fromBigInt(BigInt.zero()));
    this.set("buyer", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TicketBoughtEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TicketBoughtEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TicketBoughtEntity", id.toString(), this);
    }
  }

  static load(id: string): TicketBoughtEntity | null {
    return changetype<TicketBoughtEntity | null>(
      store.get("TicketBoughtEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get ticketID(): BigInt {
    let value = this.get("ticketID");
    return value!.toBigInt();
  }

  set ticketID(value: BigInt) {
    this.set("ticketID", Value.fromBigInt(value));
  }

  get childContract(): string | null {
    let value = this.get("childContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set childContract(value: string | null) {
    if (!value) {
      this.unset("childContract");
    } else {
      this.set("childContract", Value.fromString(<string>value));
    }
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }
}

export class ChildCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("title", Value.fromString(""));
    this.set("fee", Value.fromBigInt(BigInt.zero()));
    this.set("seats", Value.fromBigInt(BigInt.zero()));
    this.set("image", Value.fromString(""));
    this.set("eventHost", Value.fromString(""));
    this.set("description", Value.fromString(""));
    this.set("link", Value.fromString(""));
    this.set("date", Value.fromString(""));
    this.set("venue", Value.fromString(""));
    this.set("ticketsBought", Value.fromStringArray(new Array(0)));
    this.set("childAddress", Value.fromString(""));
    this.set("category", Value.fromString(""));
    this.set("buyers", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChildCreatedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ChildCreatedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ChildCreatedEntity", id.toString(), this);
    }
  }

  static load(id: string): ChildCreatedEntity | null {
    return changetype<ChildCreatedEntity | null>(
      store.get("ChildCreatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get seats(): BigInt {
    let value = this.get("seats");
    return value!.toBigInt();
  }

  set seats(value: BigInt) {
    this.set("seats", Value.fromBigInt(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get eventHost(): string {
    let value = this.get("eventHost");
    return value!.toString();
  }

  set eventHost(value: string) {
    this.set("eventHost", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get link(): string {
    let value = this.get("link");
    return value!.toString();
  }

  set link(value: string) {
    this.set("link", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get venue(): string {
    let value = this.get("venue");
    return value!.toString();
  }

  set venue(value: string) {
    this.set("venue", Value.fromString(value));
  }

  get ticketsBought(): Array<string> {
    let value = this.get("ticketsBought");
    return value!.toStringArray();
  }

  set ticketsBought(value: Array<string>) {
    this.set("ticketsBought", Value.fromStringArray(value));
  }

  get childAddress(): string {
    let value = this.get("childAddress");
    return value!.toString();
  }

  set childAddress(value: string) {
    this.set("childAddress", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    return value!.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get buyers(): Array<string> {
    let value = this.get("buyers");
    return value!.toStringArray();
  }

  set buyers(value: Array<string>) {
    this.set("buyers", Value.fromStringArray(value));
  }
}

export class FeaturedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeaturedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FeaturedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FeaturedEntity", id.toString(), this);
    }
  }

  static load(id: string): FeaturedEntity | null {
    return changetype<FeaturedEntity | null>(store.get("FeaturedEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get event(): string | null {
    let value = this.get("event");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set event(value: string | null) {
    if (!value) {
      this.unset("event");
    } else {
      this.set("event", Value.fromString(<string>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tickets(): Array<string> {
    let value = this.get("tickets");
    return value!.toStringArray();
  }

  set tickets(value: Array<string>) {
    this.set("tickets", Value.fromStringArray(value));
  }
}
